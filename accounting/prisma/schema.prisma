// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id       String

  created DateTime @default(now())
  updated DateTime @updatedAt

  // Account users
  accounts  AccountUser[] @relation()
  // Currency admins
  currency  Currency[]    @relation()
  // Transfer users
  transfers Transfer[]    @relation()

  // Same user could log in to different tenants.
  @@id([tenantId, id])
}

model Currency {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id       String @id @default(uuid())

  status String @default("new") @db.VarChar(31)

  code       String @unique @db.VarChar(31)
  name       String @db.VarChar(255)
  namePlural String @db.VarChar(255)
  symbol     String @db.VarChar(255)

  decimals Int
  scale    Int

  rateN Int
  rateD Int

  // Currency settings defined by currency admin.
  settings Json?

  // Currency state to be persisted between runs. 

  // This object contains cursors for keeping track of the point
  // until this currency has been updated from the ledger.
  state Json?
  //externalTradesStreamCursor String  @db.VarChar(255) @default("0")

  created DateTime @default(now())
  updated DateTime @updatedAt

  // EncryptionKey
  encryptionKeyId String @unique @db.VarChar(255)

  // Currency keys
  issuerKeyId         String? @unique @db.VarChar(255)
  creditKeyId         String? @unique @db.VarChar(255)
  adminKeyId          String? @unique @db.VarChar(255)
  externalIssuerKeyId String? @unique @db.VarChar(255)
  externalTraderKeyId String? @unique @db.VarChar(255)

  // Currency admin user.
  adminId String
  admin   User   @relation(fields: [adminId, tenantId], references: [id, tenantId])

  // Currency external virtual account
  externalAccountId String?  @unique
  externalAccount   Account? @relation("externalAccount", fields: [externalAccountId], references: [id])

  encryptionKey     EncryptedSecret? @relation("encryption", fields: [encryptionKeyId], references: [id])
  issuerKey         EncryptedSecret? @relation("issuer", fields: [issuerKeyId], references: [id])
  creditKey         EncryptedSecret? @relation("credit", fields: [creditKeyId], references: [id])
  adminKey          EncryptedSecret? @relation("admin", fields: [adminKeyId], references: [id])
  externalIssuerKey EncryptedSecret? @relation("externalIssuer", fields: [externalIssuerKeyId], references: [id])
  externalTraderKey EncryptedSecret? @relation("externalTrader", fields: [externalTraderKeyId], references: [id])

  accounts Account[] @relation()

  trustlines Trustline[] @relation()
}

enum AccountType {
  user
  virtual
}

model AccountUser {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  userId String
  user   User   @relation(fields: [tenantId, userId], references: [tenantId, id])

  @@id([accountId, userId])
}

model Account {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id       String @id @default(uuid())
  code     String @unique @db.VarChar(255)

  status String      @default("active") @db.VarChar(31)
  type   AccountType @default(user)

  keyId      String @unique @db.VarChar(255)
  currencyId String

  users AccountUser[] @relation()

  // Account settings defined by currency admin and the user.
  settings Json?

  // These three fields are just a cache from the Stellar network.
  balance        BigInt
  creditLimit    BigInt
  maximumBalance BigInt?

  created DateTime @default(now())
  updated DateTime @updatedAt

  key      EncryptedSecret @relation(fields: [keyId], references: [id])
  currency Currency        @relation(fields: [currencyId], references: [id])

  payerTransfers Transfer[] @relation("payer")
  payeeTransfers Transfer[] @relation("payee")

  externalAccount Currency? @relation("externalAccount")

  tags              AccountTag[]        @relation()

  // Each CreditCommonsNode has a "vostro" Account
  CreditCommonsNode CreditCommonsNode[]

  @@unique([id, tenantId]) 
}

model AccountTag {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)

  id String @id @default(uuid())

  // The hash of the tag value.
  hash String @db.VarChar(255)
  name String @db.VarChar(255)

  created DateTime @default(now())
  updated DateTime @updatedAt

  accountId String
  account   Account @relation(fields: [accountId], references: [id])
}

model Transfer {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id       String @default(uuid())

  state  String @default("new") @db.VarChar(31)
  amount BigInt
  meta   String @db.Text

  hash String? @db.VarChar(255)

  authorization Json?

  payerId String
  payer   Account @relation("payer", fields: [payerId], references: [id])

  payeeId String
  payee   Account @relation("payee", fields: [payeeId], references: [id])

  userId String
  user   User   @relation(fields: [tenantId, userId], references: [tenantId, id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  externalTransfer ExternalTransfer? @relation()

  @@id([tenantId, id])
  @@unique([tenantId, hash])
}

model EncryptedSecret {
  tenantId        String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id              String @id @default(uuid())
  encryptedSecret String @db.VarChar(255)

  created   DateTime @default(now())
  updated   DateTime @updatedAt
  encrypted DateTime @default(now())
  accessed  DateTime @default(now())

  // These are required by prisma, but we don't use them
  account                Account?  @relation
  encryptionCurrency     Currency? @relation("encryption")
  issuerCurrency         Currency? @relation("issuer")
  creditCurrency         Currency? @relation("credit")
  adminCurrency          Currency? @relation("admin")
  externalIssuerCurrency Currency? @relation("externalIssuer")
  externalTraderCurrency Currency? @relation("externalTrader")
}

model Trustline {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  id       String @id @default(uuid())

  // This is the trustline limit from the local external account to the remote external account.
  limit   BigInt
  // This is the balance of the local external account minus the balance of the remote external account.
  balance BigInt

  created DateTime @default(now())
  updated DateTime @updatedAt

  trustedId String
  trusted   ExternalResource @relation(fields: [tenantId, trustedId], references: [tenantId, id])

  currencyId String
  currency   Currency @relation(fields: [currencyId], references: [id])
}

model ExternalTransfer {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)

  // Same id as transfer
  id       String   @db.VarChar(255)
  transfer Transfer @relation(fields: [tenantId, id], references: [tenantId, id])

  externalPayerId String?
  externalPayer   ExternalResource? @relation("externalPayer", fields: [tenantId, externalPayerId], references: [tenantId, id])

  externalPayeeId String?
  externalPayee   ExternalResource? @relation("externalPayee", fields: [tenantId, externalPayeeId], references: [tenantId, id])

  @@id([tenantId, id])
}

model ExternalResource {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)

  // Same id as external resource
  id String

  type String @db.VarChar(255)
  href String @db.VarChar(255)

  // Cached resource data.
  resource Json?

  created DateTime @default(now())
  updated DateTime @updatedAt

  trustlines             Trustline[]        @relation()
  externalPayerTransfers ExternalTransfer[] @relation("externalPayer")
  externalPayeeTransfers ExternalTransfer[] @relation("externalPayee")

  @@id([tenantId, id])
}

model Value {
  tenantId String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  key      String @db.VarChar(255)

  value Json

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([tenantId, key])
}

model CreditCommonsNode {
  tenantId      String @default(dbgenerated("(current_setting('app.current_tenant_id'))::text")) @db.VarChar(31)
  peerNodePath    String @db.VarChar(255)
  ourNodePath String @db.VarChar(255)
  lastHash      String @db.VarChar(255)
  url           String @db.VarChar(255)

  // Vostro account acts as a proxy representing this Credit Commons Node on our ledger
  vostroId String
  vostro   Account @relation(fields: [vostroId, tenantId], references: [id, tenantId])

  @@id([tenantId, peerNodePath])
}
